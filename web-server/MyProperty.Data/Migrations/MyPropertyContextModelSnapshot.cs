// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProperty.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MyProperty.Data.Migrations
{
    [DbContext(typeof(MyPropertyContext))]
    partial class MyPropertyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MyProperty.Data.Entities.AssignedProperty", b =>
                {
                    b.Property<Guid>("AssignedPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<Guid>("PropertyId")
                        .HasColumnName("property_id");

                    b.Property<string>("Rent")
                        .IsRequired()
                        .HasColumnName("rent");

                    b.Property<string>("RentDocumentFilePath");

                    b.Property<DateTime>("RentStartDate");

                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.HasKey("AssignedPropertyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenantId");

                    b.ToTable("assigned_properties");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.AssignedPropertyHistory", b =>
                {
                    b.Property<Guid>("AssignedPropertyHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<Guid>("PropertyId")
                        .HasColumnName("property_id");

                    b.Property<string>("Rent")
                        .IsRequired()
                        .HasColumnName("rent");

                    b.Property<string>("RentDocumentFilePath");

                    b.Property<DateTime>("RentStartDate");

                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.HasKey("AssignedPropertyHistoryId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenantId");

                    b.ToTable("assigned_property_histories");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("username");

                    b.HasKey("OwnerId");

                    b.ToTable("owners");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnName("amount");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("Credit")
                        .HasColumnName("credit");

                    b.Property<bool>("Debit")
                        .HasColumnName("debit");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<Guid>("PropertyId")
                        .HasColumnName("property_id");

                    b.Property<Guid?>("PropertyOwnerId")
                        .HasColumnName("property_owner_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.HasKey("PaymentId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("TenantId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.Property", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnName("area");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<Guid>("PropertyOwnerId")
                        .HasColumnName("property_owner_id");

                    b.Property<string>("Rent")
                        .IsRequired()
                        .HasColumnName("rent");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropertyOwnerId");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.PropertyOwner", b =>
                {
                    b.Property<Guid>("PropertyOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.HasKey("PropertyOwnerId");

                    b.ToTable("properties_owners");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.AssignedProperty", b =>
                {
                    b.HasOne("MyProperty.Data.Entities.Property", "Property")
                        .WithMany("AssignedProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProperty.Data.Entities.Tenant", "Tenant")
                        .WithMany("AssignedProperties")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProperty.Data.Entities.AssignedPropertyHistory", b =>
                {
                    b.HasOne("MyProperty.Data.Entities.Property", "Property")
                        .WithMany("AssignedPropertyHistories")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProperty.Data.Entities.Tenant", "Tenant")
                        .WithMany("AssignedPropertyHistories")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProperty.Data.Entities.Payment", b =>
                {
                    b.HasOne("MyProperty.Data.Entities.Property", "Property")
                        .WithMany("Payments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProperty.Data.Entities.PropertyOwner", "PropertyOwner")
                        .WithMany("Payments")
                        .HasForeignKey("PropertyOwnerId");

                    b.HasOne("MyProperty.Data.Entities.Tenant", "Tenant")
                        .WithMany("Payments")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("MyProperty.Data.Entities.Property", b =>
                {
                    b.HasOne("MyProperty.Data.Entities.PropertyOwner", "PropertyOwner")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
